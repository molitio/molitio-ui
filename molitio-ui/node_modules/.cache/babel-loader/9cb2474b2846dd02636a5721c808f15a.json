{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { toDashCase } from './utils/strings';\n/**\n * Actually parses the theme options\n */\n\nexport var parseThemeOptions = function (theme) {\n  var themeItems = Array.isArray(theme) ? theme : [theme];\n  return themeItems.filter(function (v) {\n    return !!v;\n  }).map(function (v) {\n    return \"mdc-theme--\" + toDashCase(v);\n  });\n};\n/**\n * HOC that adds themeability to any component\n */\n\nexport var withTheme = function (Component) {\n  var HOC = function (_a) {\n    var theme = _a.theme,\n        className = _a.className,\n        rest = __rest(_a, [\"theme\", \"className\"]);\n\n    if (theme) {\n      var classes = classNames(className, parseThemeOptions(theme));\n      return React.createElement(Component, __assign({\n        className: classes\n      }, rest));\n    }\n\n    return React.createElement(Component, __assign({\n      className: className\n    }, rest));\n  };\n\n  HOC.displayName = 'withTheme';\n  return HOC;\n};","map":{"version":3,"sources":["/Users/vycos-zen/git/molitio-workspace/molitio-ui/node_modules/@rmwc/base/next/with-theme.js"],"names":["__assign","__rest","React","classNames","toDashCase","parseThemeOptions","theme","themeItems","Array","isArray","filter","v","map","withTheme","Component","HOC","_a","className","rest","classes","createElement","displayName"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA;AACA;AACA;;AACA,OAAO,IAAIC,iBAAiB,GAAG,UAAUC,KAAV,EAAiB;AAC5C,MAAIC,UAAU,GAAGC,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAhD;AACA,SAAOC,UAAU,CACZG,MADE,CACK,UAAUC,CAAV,EAAa;AAAE,WAAO,CAAC,CAACA,CAAT;AAAa,GADjC,EAEFC,GAFE,CAEE,UAAUD,CAAV,EAAa;AAAE,WAAO,gBAAgBP,UAAU,CAACO,CAAD,CAAjC;AAAuC,GAFxD,CAAP;AAGH,CALM;AAMP;AACA;AACA;;AACA,OAAO,IAAIE,SAAS,GAAG,UAAUC,SAAV,EAAqB;AACxC,MAAIC,GAAG,GAAG,UAAUC,EAAV,EAAc;AACpB,QAAIV,KAAK,GAAGU,EAAE,CAACV,KAAf;AAAA,QAAsBW,SAAS,GAAGD,EAAE,CAACC,SAArC;AAAA,QAAgDC,IAAI,GAAGjB,MAAM,CAACe,EAAD,EAAK,CAAC,OAAD,EAAU,WAAV,CAAL,CAA7D;;AACA,QAAIV,KAAJ,EAAW;AACP,UAAIa,OAAO,GAAGhB,UAAU,CAACc,SAAD,EAAYZ,iBAAiB,CAACC,KAAD,CAA7B,CAAxB;AACA,aAAOJ,KAAK,CAACkB,aAAN,CAAoBN,SAApB,EAA+Bd,QAAQ,CAAC;AAAEiB,QAAAA,SAAS,EAAEE;AAAb,OAAD,EAAyBD,IAAzB,CAAvC,CAAP;AACH;;AACD,WAAOhB,KAAK,CAACkB,aAAN,CAAoBN,SAApB,EAA+Bd,QAAQ,CAAC;AAAEiB,MAAAA,SAAS,EAAEA;AAAb,KAAD,EAA2BC,IAA3B,CAAvC,CAAP;AACH,GAPD;;AAQAH,EAAAA,GAAG,CAACM,WAAJ,GAAkB,WAAlB;AACA,SAAON,GAAP;AACH,CAXM","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { toDashCase } from './utils/strings';\n/**\n * Actually parses the theme options\n */\nexport var parseThemeOptions = function (theme) {\n    var themeItems = Array.isArray(theme) ? theme : [theme];\n    return themeItems\n        .filter(function (v) { return !!v; })\n        .map(function (v) { return \"mdc-theme--\" + toDashCase(v); });\n};\n/**\n * HOC that adds themeability to any component\n */\nexport var withTheme = function (Component) {\n    var HOC = function (_a) {\n        var theme = _a.theme, className = _a.className, rest = __rest(_a, [\"theme\", \"className\"]);\n        if (theme) {\n            var classes = classNames(className, parseThemeOptions(theme));\n            return React.createElement(Component, __assign({ className: classes }, rest));\n        }\n        return React.createElement(Component, __assign({ className: className }, rest));\n    };\n    HOC.displayName = 'withTheme';\n    return HOC;\n};\n"]},"metadata":{},"sourceType":"module"}