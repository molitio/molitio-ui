{"ast":null,"code":"var CACHE_NAME = 'pwa-task-manager';\nvar urlsToCache = ['/', '/missionboard']; // Install a service worker\n\nself.addEventListener('install', event => {\n  // Perform install steps\n  event.waitUntil(caches.open(CACHE_NAME).then(function (cache) {\n    console.log('Opened cache');\n    return cache.addAll(urlsToCache);\n  }));\n}); // Cache and return requests\n\nself.addEventListener('fetch', event => {\n  event.respondWith(caches.match(event.request).then(function (response) {\n    // Cache hit - return response\n    if (response) {\n      return response;\n    }\n\n    return fetch(event.request);\n  }));\n}); // Update a service worker\n\nself.addEventListener('activate', event => {\n  var cacheWhitelist = ['pwa-task-manager'];\n  event.waitUntil(caches.keys().then(cacheNames => {\n    return Promise.all(cacheNames.map(cacheName => {\n      if (cacheWhitelist.indexOf(cacheName) === -1) {\n        return caches.delete(cacheName);\n      }\n    }));\n  }));\n});","map":{"version":3,"sources":["/Users/vycos-zen/git/molitio-workspace/molitio-ui/src/worker.js"],"names":["CACHE_NAME","urlsToCache","self","addEventListener","event","waitUntil","caches","open","then","cache","console","log","addAll","respondWith","match","request","response","fetch","cacheWhitelist","keys","cacheNames","Promise","all","map","cacheName","indexOf","delete"],"mappings":"AAAA,IAAIA,UAAU,GAAG,kBAAjB;AACA,IAAIC,WAAW,GAAG,CAChB,GADgB,EAEhB,eAFgB,CAAlB,C,CAKA;;AACAC,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAiCC,KAAK,IAAI;AACxC;AACAA,EAAAA,KAAK,CAACC,SAAN,CACEC,MAAM,CAACC,IAAP,CAAYP,UAAZ,EACGQ,IADH,CACQ,UAASC,KAAT,EAAgB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,WAAOF,KAAK,CAACG,MAAN,CAAaX,WAAb,CAAP;AACD,GAJH,CADF;AAOD,CATD,E,CAWA;;AACAC,IAAI,CAACC,gBAAL,CAAsB,OAAtB,EAA+BC,KAAK,IAAI;AACtCA,EAAAA,KAAK,CAACS,WAAN,CACEP,MAAM,CAACQ,KAAP,CAAaV,KAAK,CAACW,OAAnB,EACGP,IADH,CACQ,UAASQ,QAAT,EAAmB;AACvB;AACA,QAAIA,QAAJ,EAAc;AACZ,aAAOA,QAAP;AACD;;AACD,WAAOC,KAAK,CAACb,KAAK,CAACW,OAAP,CAAZ;AACD,GAPH,CADF;AAWD,CAZD,E,CAcA;;AACAb,IAAI,CAACC,gBAAL,CAAsB,UAAtB,EAAkCC,KAAK,IAAI;AACzC,MAAIc,cAAc,GAAG,CAAC,kBAAD,CAArB;AACAd,EAAAA,KAAK,CAACC,SAAN,CACEC,MAAM,CAACa,IAAP,GAAcX,IAAd,CAAmBY,UAAU,IAAI;AAC/B,WAAOC,OAAO,CAACC,GAAR,CACLF,UAAU,CAACG,GAAX,CAAeC,SAAS,IAAI;AAC1B,UAAIN,cAAc,CAACO,OAAf,CAAuBD,SAAvB,MAAsC,CAAC,CAA3C,EAA8C;AAC5C,eAAOlB,MAAM,CAACoB,MAAP,CAAcF,SAAd,CAAP;AACD;AACF,KAJD,CADK,CAAP;AAOD,GARD,CADF;AAWD,CAbD","sourcesContent":["var CACHE_NAME = 'pwa-task-manager';\nvar urlsToCache = [\n  '/',\n  '/missionboard'\n];\n\n// Install a service worker\nself.addEventListener('install', event => {\n  // Perform install steps\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(function(cache) {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\n// Cache and return requests\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request)\n      .then(function(response) {\n        // Cache hit - return response\n        if (response) {\n          return response;\n        }\n        return fetch(event.request);\n      }\n    )\n  );\n});\n\n// Update a service worker\nself.addEventListener('activate', event => {\n  var cacheWhitelist = ['pwa-task-manager'];\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheWhitelist.indexOf(cacheName) === -1) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});"]},"metadata":{},"sourceType":"module"}